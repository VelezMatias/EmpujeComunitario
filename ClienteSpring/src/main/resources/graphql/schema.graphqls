type DonationGroup {
  categoria: String
  eliminado: String
  total: Float
}

type DonationDetail {
  descripcion: String
  cantidad: Int
  fecha_alta: String
}

type Query {
  donationReportGrouped(
    categoria: String
    from: String
    to: String
    eliminado: String
  ): [DonationGroup]

  donationDetails(
    categoria: String
    eliminado: String
    from: String
    to: String
  ): [DonationDetail]

  # Informe de participación en eventos propios
  eventParticipationReport(
    usuarioId: Int!,
    from: String,
    to: String,
    repartoDonaciones: String # "SI" | "NO" | "AMBOS"
  ): [EventMonthGroup]


  # Devuelve los filtros guardados del usuario autenticado (Donaciones)
  myFilters: [DonationSavedFilter]
}

type EventDonation {
  descripcion: String
  cantidad: Int
}

type EventItem {
  dia: Int
  nombre: String
  descripcion: String
  donaciones: [EventDonation]
}

type EventMonthGroup {
  mes: String
  year: Int
  eventos: [EventItem]
}


# ==================== (Donaciones - Filtros) ====================
# Objeto que representa un filtro guardado
type DonationSavedFilter {
  id: ID!
  nombre: String!
  categoria: String
  from: String
  to: String
  eliminado: String
}

# Input para crear/actualizar filtros
input FilterInput {
  nombre: String!
  categoria: String
  from: String
  to: String
  eliminado: String
}

# Nota: definir el base type Mutation (no usar extend si no existe el base)
type Mutation {
  # Crea un filtro de donaciones
  saveFilter(input: FilterInput!): DonationSavedFilter

  # Actualiza un filtro existente
  updateFilter(id: ID!, input: FilterInput!): DonationSavedFilter

  # Elimina un filtro y retorna true si se eliminó
  deleteFilter(id: ID!): Boolean
}