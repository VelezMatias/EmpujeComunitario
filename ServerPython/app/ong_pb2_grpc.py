# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import ong_pb2 as ong__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in ong_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class UserServiceStub(object):
    """-- Servicios --
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateUser = channel.unary_unary(
                '/ong.UserService/CreateUser',
                request_serializer=ong__pb2.CreateUserRequest.SerializeToString,
                response_deserializer=ong__pb2.ApiResponse.FromString,
                _registered_method=True)
        self.UpdateUser = channel.unary_unary(
                '/ong.UserService/UpdateUser',
                request_serializer=ong__pb2.UpdateUserRequest.SerializeToString,
                response_deserializer=ong__pb2.ApiResponse.FromString,
                _registered_method=True)
        self.DeactivateUser = channel.unary_unary(
                '/ong.UserService/DeactivateUser',
                request_serializer=ong__pb2.DeactivateUserRequest.SerializeToString,
                response_deserializer=ong__pb2.ApiResponse.FromString,
                _registered_method=True)
        self.Login = channel.unary_unary(
                '/ong.UserService/Login',
                request_serializer=ong__pb2.LoginRequest.SerializeToString,
                response_deserializer=ong__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.ListUsers = channel.unary_unary(
                '/ong.UserService/ListUsers',
                request_serializer=ong__pb2.Empty.SerializeToString,
                response_deserializer=ong__pb2.ListUsersResponse.FromString,
                _registered_method=True)


class UserServiceServicer(object):
    """-- Servicios --
    """

    def CreateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeactivateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUser,
                    request_deserializer=ong__pb2.CreateUserRequest.FromString,
                    response_serializer=ong__pb2.ApiResponse.SerializeToString,
            ),
            'UpdateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUser,
                    request_deserializer=ong__pb2.UpdateUserRequest.FromString,
                    response_serializer=ong__pb2.ApiResponse.SerializeToString,
            ),
            'DeactivateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DeactivateUser,
                    request_deserializer=ong__pb2.DeactivateUserRequest.FromString,
                    response_serializer=ong__pb2.ApiResponse.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=ong__pb2.LoginRequest.FromString,
                    response_serializer=ong__pb2.LoginResponse.SerializeToString,
            ),
            'ListUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListUsers,
                    request_deserializer=ong__pb2.Empty.FromString,
                    response_serializer=ong__pb2.ListUsersResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ong.UserService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ong.UserService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class UserService(object):
    """-- Servicios --
    """

    @staticmethod
    def CreateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ong.UserService/CreateUser',
            ong__pb2.CreateUserRequest.SerializeToString,
            ong__pb2.ApiResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ong.UserService/UpdateUser',
            ong__pb2.UpdateUserRequest.SerializeToString,
            ong__pb2.ApiResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeactivateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ong.UserService/DeactivateUser',
            ong__pb2.DeactivateUserRequest.SerializeToString,
            ong__pb2.ApiResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ong.UserService/Login',
            ong__pb2.LoginRequest.SerializeToString,
            ong__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ong.UserService/ListUsers',
            ong__pb2.Empty.SerializeToString,
            ong__pb2.ListUsersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class DonationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateDonationItem = channel.unary_unary(
                '/ong.DonationService/CreateDonationItem',
                request_serializer=ong__pb2.CreateDonationRequest.SerializeToString,
                response_deserializer=ong__pb2.ApiResponse.FromString,
                _registered_method=True)
        self.UpdateDonationItem = channel.unary_unary(
                '/ong.DonationService/UpdateDonationItem',
                request_serializer=ong__pb2.UpdateDonationRequest.SerializeToString,
                response_deserializer=ong__pb2.ApiResponse.FromString,
                _registered_method=True)
        self.SoftDeleteDonationItem = channel.unary_unary(
                '/ong.DonationService/SoftDeleteDonationItem',
                request_serializer=ong__pb2.SoftDeleteDonationRequest.SerializeToString,
                response_deserializer=ong__pb2.ApiResponse.FromString,
                _registered_method=True)
        self.ListDonationItems = channel.unary_unary(
                '/ong.DonationService/ListDonationItems',
                request_serializer=ong__pb2.Empty.SerializeToString,
                response_deserializer=ong__pb2.ListDonationsResponse.FromString,
                _registered_method=True)
        self.TransferDonations = channel.unary_unary(
                '/ong.DonationService/TransferDonations',
                request_serializer=ong__pb2.TransferDonationsRequest.SerializeToString,
                response_deserializer=ong__pb2.TransferDonationsResponse.FromString,
                _registered_method=True)


class DonationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateDonationItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDonationItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SoftDeleteDonationItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDonationItems(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransferDonations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DonationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateDonationItem': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDonationItem,
                    request_deserializer=ong__pb2.CreateDonationRequest.FromString,
                    response_serializer=ong__pb2.ApiResponse.SerializeToString,
            ),
            'UpdateDonationItem': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDonationItem,
                    request_deserializer=ong__pb2.UpdateDonationRequest.FromString,
                    response_serializer=ong__pb2.ApiResponse.SerializeToString,
            ),
            'SoftDeleteDonationItem': grpc.unary_unary_rpc_method_handler(
                    servicer.SoftDeleteDonationItem,
                    request_deserializer=ong__pb2.SoftDeleteDonationRequest.FromString,
                    response_serializer=ong__pb2.ApiResponse.SerializeToString,
            ),
            'ListDonationItems': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDonationItems,
                    request_deserializer=ong__pb2.Empty.FromString,
                    response_serializer=ong__pb2.ListDonationsResponse.SerializeToString,
            ),
            'TransferDonations': grpc.unary_unary_rpc_method_handler(
                    servicer.TransferDonations,
                    request_deserializer=ong__pb2.TransferDonationsRequest.FromString,
                    response_serializer=ong__pb2.TransferDonationsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ong.DonationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ong.DonationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DonationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateDonationItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ong.DonationService/CreateDonationItem',
            ong__pb2.CreateDonationRequest.SerializeToString,
            ong__pb2.ApiResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateDonationItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ong.DonationService/UpdateDonationItem',
            ong__pb2.UpdateDonationRequest.SerializeToString,
            ong__pb2.ApiResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SoftDeleteDonationItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ong.DonationService/SoftDeleteDonationItem',
            ong__pb2.SoftDeleteDonationRequest.SerializeToString,
            ong__pb2.ApiResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListDonationItems(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ong.DonationService/ListDonationItems',
            ong__pb2.Empty.SerializeToString,
            ong__pb2.ListDonationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TransferDonations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ong.DonationService/TransferDonations',
            ong__pb2.TransferDonationsRequest.SerializeToString,
            ong__pb2.TransferDonationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class EventServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateEvent = channel.unary_unary(
                '/ong.EventService/CreateEvent',
                request_serializer=ong__pb2.CreateEventRequest.SerializeToString,
                response_deserializer=ong__pb2.ApiResponse.FromString,
                _registered_method=True)
        self.UpdateEvent = channel.unary_unary(
                '/ong.EventService/UpdateEvent',
                request_serializer=ong__pb2.UpdateEventRequest.SerializeToString,
                response_deserializer=ong__pb2.ApiResponse.FromString,
                _registered_method=True)
        self.DeleteEvent = channel.unary_unary(
                '/ong.EventService/DeleteEvent',
                request_serializer=ong__pb2.DeleteEventRequest.SerializeToString,
                response_deserializer=ong__pb2.ApiResponse.FromString,
                _registered_method=True)
        self.AssignMember = channel.unary_unary(
                '/ong.EventService/AssignMember',
                request_serializer=ong__pb2.AssignMemberRequest.SerializeToString,
                response_deserializer=ong__pb2.ApiResponse.FromString,
                _registered_method=True)
        self.RemoveMember = channel.unary_unary(
                '/ong.EventService/RemoveMember',
                request_serializer=ong__pb2.RemoveMemberRequest.SerializeToString,
                response_deserializer=ong__pb2.ApiResponse.FromString,
                _registered_method=True)
        self.RegisterDistribution = channel.unary_unary(
                '/ong.EventService/RegisterDistribution',
                request_serializer=ong__pb2.RegisterDistributionRequest.SerializeToString,
                response_deserializer=ong__pb2.ApiResponse.FromString,
                _registered_method=True)
        self.ListEvents = channel.unary_unary(
                '/ong.EventService/ListEvents',
                request_serializer=ong__pb2.Empty.SerializeToString,
                response_deserializer=ong__pb2.ListEventsResponse.FromString,
                _registered_method=True)
        self.AssignDonationToEvent = channel.unary_unary(
                '/ong.EventService/AssignDonationToEvent',
                request_serializer=ong__pb2.AssignDonationToEventRequest.SerializeToString,
                response_deserializer=ong__pb2.ApiResponse.FromString,
                _registered_method=True)
        self.RemoveDonationFromEvent = channel.unary_unary(
                '/ong.EventService/RemoveDonationFromEvent',
                request_serializer=ong__pb2.RemoveDonationFromEventRequest.SerializeToString,
                response_deserializer=ong__pb2.ApiResponse.FromString,
                _registered_method=True)
        self.ListDonationsByEvent = channel.unary_unary(
                '/ong.EventService/ListDonationsByEvent',
                request_serializer=ong__pb2.ListDonationsByEventRequest.SerializeToString,
                response_deserializer=ong__pb2.ListDonationsByEventResponse.FromString,
                _registered_method=True)


class EventServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssignMember(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveMember(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterDistribution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssignDonationToEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveDonationFromEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDonationsByEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EventServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateEvent,
                    request_deserializer=ong__pb2.CreateEventRequest.FromString,
                    response_serializer=ong__pb2.ApiResponse.SerializeToString,
            ),
            'UpdateEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateEvent,
                    request_deserializer=ong__pb2.UpdateEventRequest.FromString,
                    response_serializer=ong__pb2.ApiResponse.SerializeToString,
            ),
            'DeleteEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteEvent,
                    request_deserializer=ong__pb2.DeleteEventRequest.FromString,
                    response_serializer=ong__pb2.ApiResponse.SerializeToString,
            ),
            'AssignMember': grpc.unary_unary_rpc_method_handler(
                    servicer.AssignMember,
                    request_deserializer=ong__pb2.AssignMemberRequest.FromString,
                    response_serializer=ong__pb2.ApiResponse.SerializeToString,
            ),
            'RemoveMember': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveMember,
                    request_deserializer=ong__pb2.RemoveMemberRequest.FromString,
                    response_serializer=ong__pb2.ApiResponse.SerializeToString,
            ),
            'RegisterDistribution': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterDistribution,
                    request_deserializer=ong__pb2.RegisterDistributionRequest.FromString,
                    response_serializer=ong__pb2.ApiResponse.SerializeToString,
            ),
            'ListEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.ListEvents,
                    request_deserializer=ong__pb2.Empty.FromString,
                    response_serializer=ong__pb2.ListEventsResponse.SerializeToString,
            ),
            'AssignDonationToEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.AssignDonationToEvent,
                    request_deserializer=ong__pb2.AssignDonationToEventRequest.FromString,
                    response_serializer=ong__pb2.ApiResponse.SerializeToString,
            ),
            'RemoveDonationFromEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveDonationFromEvent,
                    request_deserializer=ong__pb2.RemoveDonationFromEventRequest.FromString,
                    response_serializer=ong__pb2.ApiResponse.SerializeToString,
            ),
            'ListDonationsByEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDonationsByEvent,
                    request_deserializer=ong__pb2.ListDonationsByEventRequest.FromString,
                    response_serializer=ong__pb2.ListDonationsByEventResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ong.EventService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ong.EventService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class EventService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ong.EventService/CreateEvent',
            ong__pb2.CreateEventRequest.SerializeToString,
            ong__pb2.ApiResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ong.EventService/UpdateEvent',
            ong__pb2.UpdateEventRequest.SerializeToString,
            ong__pb2.ApiResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ong.EventService/DeleteEvent',
            ong__pb2.DeleteEventRequest.SerializeToString,
            ong__pb2.ApiResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AssignMember(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ong.EventService/AssignMember',
            ong__pb2.AssignMemberRequest.SerializeToString,
            ong__pb2.ApiResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveMember(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ong.EventService/RemoveMember',
            ong__pb2.RemoveMemberRequest.SerializeToString,
            ong__pb2.ApiResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterDistribution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ong.EventService/RegisterDistribution',
            ong__pb2.RegisterDistributionRequest.SerializeToString,
            ong__pb2.ApiResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ong.EventService/ListEvents',
            ong__pb2.Empty.SerializeToString,
            ong__pb2.ListEventsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AssignDonationToEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ong.EventService/AssignDonationToEvent',
            ong__pb2.AssignDonationToEventRequest.SerializeToString,
            ong__pb2.ApiResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveDonationFromEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ong.EventService/RemoveDonationFromEvent',
            ong__pb2.RemoveDonationFromEventRequest.SerializeToString,
            ong__pb2.ApiResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListDonationsByEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ong.EventService/ListDonationsByEvent',
            ong__pb2.ListDonationsByEventRequest.SerializeToString,
            ong__pb2.ListDonationsByEventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class OngServiceStub(object):
    """... (tus RPCs existentes)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListSolicitudesExternas = channel.unary_unary(
                '/ong.OngService/ListSolicitudesExternas',
                request_serializer=ong__pb2.ListExternasRequest.SerializeToString,
                response_deserializer=ong__pb2.ListSolicitudesExternasResponse.FromString,
                _registered_method=True)
        self.ListEventosExternos = channel.unary_unary(
                '/ong.OngService/ListEventosExternos',
                request_serializer=ong__pb2.ListExternasRequest.SerializeToString,
                response_deserializer=ong__pb2.ListEventosExternosResponse.FromString,
                _registered_method=True)


class OngServiceServicer(object):
    """... (tus RPCs existentes)
    """

    def ListSolicitudesExternas(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListEventosExternos(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OngServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListSolicitudesExternas': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSolicitudesExternas,
                    request_deserializer=ong__pb2.ListExternasRequest.FromString,
                    response_serializer=ong__pb2.ListSolicitudesExternasResponse.SerializeToString,
            ),
            'ListEventosExternos': grpc.unary_unary_rpc_method_handler(
                    servicer.ListEventosExternos,
                    request_deserializer=ong__pb2.ListExternasRequest.FromString,
                    response_serializer=ong__pb2.ListEventosExternosResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ong.OngService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ong.OngService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class OngService(object):
    """... (tus RPCs existentes)
    """

    @staticmethod
    def ListSolicitudesExternas(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ong.OngService/ListSolicitudesExternas',
            ong__pb2.ListExternasRequest.SerializeToString,
            ong__pb2.ListSolicitudesExternasResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListEventosExternos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ong.OngService/ListEventosExternos',
            ong__pb2.ListExternasRequest.SerializeToString,
            ong__pb2.ListEventosExternosResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
