syntax = "proto3";
package ong;

option java_multiple_files = true;
option java_package = "com.empuje.grpc.ong";   
option java_outer_classname = "OngProto";      



// -- Enums --
enum Role {
  ROLE_UNSPECIFIED = 0;
  PRESIDENTE = 1;
  VOCAL = 2;
  COORDINADOR = 3;
  VOLUNTARIO = 4;
}

enum Category {
  CATEGORY_UNSPECIFIED = 0;
  ROPA = 1;
  ALIMENTOS = 2;
  JUGUETES = 3;
  UTILES_ESCOLARES = 4;
}

// -- Util comun --
message AuthContext {
  int32 actor_id = 1;   // id del usuario que realiza la acción
  Role actor_role = 2;  // rol del actor (para checks simples en el server)
}

message Empty {}

message ApiResponse {
  bool success = 1;
  string message = 2;
}

// -- Usuarios --
message User {
  int32 id = 1;
  string username = 2;
  string nombre = 3;
  string apellido = 4;
  string telefono = 5;
  string email = 6;
  Role rol = 7;
  bool activo = 8;
}

message CreateUserRequest {
  AuthContext auth = 1;
  string username = 2;
  string nombre = 3;
  string apellido = 4;
  string telefono = 5;
  string email = 6;
  Role rol = 7;
}

message UpdateUserRequest {
  AuthContext auth = 1;
  int32 id = 2;
  string nombre = 3;
  string apellido = 4;
  string telefono = 5;
  string email = 6;
  Role rol = 7;
  bool activo = 8;
}

message DeactivateUserRequest {
  AuthContext auth = 1;
  int32 id = 2;
}

message LoginRequest {
  string username_or_email = 1;
  string password = 2;
}

message LoginResponse {
  bool success = 1;
  string message = 2;
  int32 user_id = 3;
  Role rol = 4;
}

message ListUsersResponse {
  repeated User users = 1;
}

// -- Inventario --
message DonationItem {
  int32 id = 1;
  Category categoria = 2;
  string descripcion = 3;
  int32 cantidad = 4;
  bool eliminado = 5;

  // auditoría (ISO8601 en UTC)
  string created_at = 6;
  int32 created_by = 7;
  string updated_at = 8;
  int32 updated_by = 9;
}

message CreateDonationRequest {
  AuthContext auth = 1;
  Category categoria = 2;
  string descripcion = 3;
  int32 cantidad = 4; // >= 0
}

message UpdateDonationRequest {
  AuthContext auth = 1;
  int32 id = 2;
  string descripcion = 3;
  int32 cantidad = 4; // >= 0
}

message SoftDeleteDonationRequest {
  AuthContext auth = 1;
  int32 id = 2;
}

message ListDonationsResponse {
  repeated DonationItem items = 1;
}

// -- Eventos --
message Event {
  int32 id = 1;
  string nombre = 2;
  string descripcion = 3;
  string fecha_hora = 4;       // ISO8601 UTC, debe ser a futuro en alta
  repeated int32 miembros = 5; // ids de usuarios
  int32 creador_id = 6;
}

message CreateEventRequest {
  AuthContext auth = 1;
  string nombre = 2;
  string descripcion = 3;
  string fecha_hora = 4; // ISO8601 UTC
}

message UpdateEventRequest {
  AuthContext auth = 1;
  int32 id = 2;
  string nombre = 3;
  string descripcion = 4;
  string fecha_hora = 5; // puede cambiar a otra futura
}

message DeleteEventRequest {
  AuthContext auth = 1;
  int32 id = 2; // solo eventos a futuro se eliminan físicamente
}

message AssignMemberRequest {
  AuthContext auth = 1;
  int32 event_id = 2;
  int32 user_id = 3;
}

message RemoveMemberRequest {
  AuthContext auth = 1;
  int32 event_id = 2;
  int32 user_id = 3;
}

message RegisterDistributionRequest {
  AuthContext auth = 1;
  int32 event_id = 2;
  repeated Distribution dist = 3;
}

message Distribution {
  int32 donation_item_id = 1;
  int32 cantidad = 2; // > 0
}

message ListEventsResponse {
  repeated Event events = 1;
}


// --- Relación Evento <-> Donación (planificación) ---
message AssignDonationToEventRequest {
  AuthContext auth = 1;
  int32 event_id = 2;
  int32 donation_id = 3;     // id en donaciones
  int32 cantidad = 4;        // planeada para el evento (>= 0)
}

message RemoveDonationFromEventRequest {
  AuthContext auth = 1;
  int32 event_id = 2;
  int32 donation_id = 3;
}

message ListDonationsByEventRequest {
  int32 event_id = 1;
}

// Qué se devuelve al listar las donaciones planeadas de un evento
message EventDonationLink {
  int32 donation_id = 1;
  int32 cantidad = 2;
}

message ListDonationsByEventResponse {
  repeated EventDonationLink items = 1;
}





// -- Servicios --
service UserService {
  rpc CreateUser(CreateUserRequest) returns (ApiResponse);
  rpc UpdateUser(UpdateUserRequest) returns (ApiResponse);
  rpc DeactivateUser(DeactivateUserRequest) returns (ApiResponse);
  rpc Login(LoginRequest) returns (LoginResponse);
  rpc ListUsers(Empty) returns (ListUsersResponse);
}

service DonationService {
  rpc CreateDonationItem(CreateDonationRequest) returns (ApiResponse);
  rpc UpdateDonationItem(UpdateDonationRequest) returns (ApiResponse);
  rpc SoftDeleteDonationItem(SoftDeleteDonationRequest) returns (ApiResponse);
  rpc ListDonationItems(Empty) returns (ListDonationsResponse);
}

service EventService {
  rpc CreateEvent(CreateEventRequest) returns (ApiResponse);
  rpc UpdateEvent(UpdateEventRequest) returns (ApiResponse);
  rpc DeleteEvent(DeleteEventRequest) returns (ApiResponse);
  rpc AssignMember(AssignMemberRequest) returns (ApiResponse);
  rpc RemoveMember(RemoveMemberRequest) returns (ApiResponse);
  rpc RegisterDistribution(RegisterDistributionRequest) returns (ApiResponse);
  rpc ListEvents(Empty) returns (ListEventsResponse);
  rpc AssignDonationToEvent(AssignDonationToEventRequest) returns (ApiResponse);
  rpc RemoveDonationFromEvent(RemoveDonationFromEventRequest) returns (ApiResponse);
  rpc ListDonationsByEvent(ListDonationsByEventRequest) returns (ListDonationsByEventResponse);

}


}


// ===== Listado de solicitudes/eventos externos (paginado simple) =====
message ListExternasRequest {
  int32 page = 1;       // 1-based
  int32 page_size = 2;  // por defecto 20
}

message SolicitudExterna {
  int32 org_id = 1;
  string solicitud_id = 2;
  string estado = 3;
  string fecha_hora = 4;    // ISO "yyyy-MM-dd HH:mm:ss"
}

message EventExterno {
  int32 org_id = 1;
  string evento_id = 2;
  string estado = 3;
  string fecha_hora = 4;    // ISO "yyyy-MM-dd HH:mm:ss"
  string titulo = 5;
  string lugar = 6;
}

message ListSolicitudesExternasResponse {
  repeated SolicitudExterna data = 1;
  int32 page = 2;
  int32 page_size = 3;
  bool has_more = 4;
}

message ListEventosExternosResponse {
  repeated EventExterno data = 1;
  int32 page = 2;
  int32 page_size = 3;
  bool has_more = 4;
}

service OngService {
  // ... (tus RPCs existentes)

  rpc ListSolicitudesExternas (ListExternasRequest) returns (ListSolicitudesExternasResponse);
  rpc ListEventosExternos (ListExternasRequest) returns (ListEventosExternosResponse);
}
